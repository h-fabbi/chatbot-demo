{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useEffect","window","addEventListener","event","$r2","document","querySelector","shadowRoot","$r3","setAttribute","sheet","CSSStyleSheet","sheet1","replaceSync","a","para","createElementNS","changeSize","newElement","appendChild","adoptedStyleSheets","getAttribute","className","intent","chat-title","agent-id","language-code","chat-icon","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"6KAkGeA,MA/Ff,WAEEC,qBAAU,WACRC,OAAOC,iBAAiB,qBAAqB,SAAUC,GACrD,IACMC,EADMC,SAASC,cAAc,gBACnBC,WAAWD,cAAc,qBACnCE,EAAMJ,EAAIG,WAAWD,cAAc,yBAC7BF,EAAIG,WAAWD,cAAc,2BACzBC,WAAWD,cAAc,6CACrCG,aAAa,cAAe,sCAChC,IAAIC,EAAQ,IAAIC,cACZC,EAAS,IAAID,cAEjBD,EAAMG,YAAN,kDACAD,EAAOC,YAAP,wfAqBA,IAAMC,EAAIN,EAAID,WAAWD,cAAc,eAEjCS,EAAOV,SAASW,gBAAgB,6BAA8B,OACpED,EAAKN,aAAa,QAAS,iDAC3BM,EAAKN,aAAa,UAAU,eAC5BM,EAAKN,aAAa,QAAQ,8BAC1BM,EAAKN,aAAa,OAAO,OACzBM,EAAKN,aAAa,YAAY,cAC9BM,EAAKN,aAAa,cAAc,OAChCM,EAAKN,aAAa,YAAY,SAC9BM,EAAKN,aAAa,cAAc,QAChCM,EAAKb,iBAAiB,SAAS,kBAAMe,OACrC,IAAIC,EAAab,SAASW,gBAAgB,6BAA8B,QACxEE,EAAWT,aAAa,IAAI,2qBAC5BS,EAAWT,aAAa,OAAO,gBAC/BM,EAAKI,YAAYD,GACjBJ,EAAEK,YAAYJ,GACdX,EAAIG,WAAWa,mBAAqB,CAAEV,GACtCF,EAAID,WAAWa,mBAAqB,CAAER,QAGxC,IAEF,IAAMK,EAAa,WACjB,IACMb,EADMC,SAASC,cAAc,gBACnBC,WAAWD,cAAc,qBACrCI,EAAQ,IAAIC,cAKL,SADCP,EAAIiB,aAAa,SAE3BX,EAAMG,YAAN,kDACAT,EAAIG,WAAWa,mBAAqB,CAAEV,GACtCN,EAAIK,aAAa,QAAO,KAMxBC,EAAMG,YAAN,gEACAT,EAAIG,WAAWa,mBAAqB,CAAEV,GACtCN,EAAIK,aAAa,QAAQ,KAK7B,OACE,qBAAKa,UAAU,MAAf,SACI,8BACEC,OAAO,UACPC,aAAW,oBACXC,WAAS,uCACTC,gBAAc,KACdC,YAAU,8EChFLC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFlC,SAASmC,eAAe,SAM1BZ,K","file":"static/js/main.0cb69c17.chunk.js","sourcesContent":["import './App.css';\nimport React, {useEffect} from 'react'\n\nfunction App() {\n\n  useEffect(() => {\n    window.addEventListener('dfMessengerLoaded', function (event) {\n      const $r1 = document.querySelector(\"df-messenger\");\n      const $r2 = $r1.shadowRoot.querySelector(\"df-messenger-chat\");\n      const $r3 = $r2.shadowRoot.querySelector(\"df-messenger-titlebar\"); \n      const $r4 = $r2.shadowRoot.querySelector(\"df-messenger-user-input\");\n      const $r5 = $r4.shadowRoot.querySelector(\".input-container .input-box-wrapper input\")\n      $r5.setAttribute(\"placeholder\", \"何か言って....\")\n      var sheet = new CSSStyleSheet();\n      var sheet1 = new CSSStyleSheet();\n      // manage box height from here\n      sheet.replaceSync( `div.chat-wrapper[opened=\"true\"] { height: 60%}`);\n      sheet1.replaceSync(`\n          @media screen and (min-width: 501px) {\n            #minimizeIcon {\n              visibility: unset;\n              cursor:pointer;\n            }    \n          }\n          #dfTitlebar{\n            display: flex;\n            justify-content: space-between;\n            width: 95%;\n            align-items: center;\n          }\n          .paraIcon{\n            color: white;\n            width: 20px;\n            height: 20px;\n            cursor: pointer;\n          }\n        `\n      )\n      const a = $r3.shadowRoot.querySelector('#dfTitlebar')\n\n      const para = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n      para.setAttribute(\"class\", \"svg-inline--fa fa-arrows-alt fa-w-16 paraIcon\");\n      para.setAttribute(\"viewBox\",\"0 0 512 512\");\n      para.setAttribute(\"xmlns\",\"http://www.w3.org/2000/svg\");\n      para.setAttribute(\"role\",\"img\");\n      para.setAttribute(\"data-icon\",\"arrows-alt\");\n      para.setAttribute(\"data-prefix\",\"fab\");\n      para.setAttribute(\"focusable\",\"false\");\n      para.setAttribute(\"aria-hidden\",\"true\");\n      para.addEventListener(\"click\", () => changeSize())\n      var newElement = document.createElementNS(\"http://www.w3.org/2000/svg\", 'path');\n      newElement.setAttribute(\"d\",\"M352.201 425.775l-79.196 79.196c-9.373 9.373-24.568 9.373-33.941 0l-79.196-79.196c-15.119-15.119-4.411-40.971 16.971-40.97h51.162L228 284H127.196v51.162c0 21.382-25.851 32.09-40.971 16.971L7.029 272.937c-9.373-9.373-9.373-24.569 0-33.941L86.225 159.8c15.119-15.119 40.971-4.411 40.971 16.971V228H228V127.196h-51.23c-21.382 0-32.09-25.851-16.971-40.971l79.196-79.196c9.373-9.373 24.568-9.373 33.941 0l79.196 79.196c15.119 15.119 4.411 40.971-16.971 40.971h-51.162V228h100.804v-51.162c0-21.382 25.851-32.09 40.97-16.971l79.196 79.196c9.373 9.373 9.373 24.569 0 33.941L425.773 352.2c-15.119 15.119-40.971 4.411-40.97-16.971V284H284v100.804h51.23c21.382 0 32.09 25.851 16.971 40.971z\");\n      newElement.setAttribute(\"fill\",\"currentColor\")\n      para.appendChild(newElement)\n      a.appendChild(para)\n      $r2.shadowRoot.adoptedStyleSheets = [ sheet ];\n      $r3.shadowRoot.adoptedStyleSheets = [ sheet1 ];\n\n    });\n  },[])\n\n  const changeSize = () => {\n    const $r1 = document.querySelector(\"df-messenger\");\n    const $r2 = $r1.shadowRoot.querySelector(\"df-messenger-chat\");\n    let sheet = new CSSStyleSheet();\n    // sheet.replaceSync( `div.chat-wrapper[opened=\"true\"] { height: 850px; width: 1880px; }`);\n    // $r2.shadowRoot.adoptedStyleSheets = [ sheet ]; \n    // $r2.setAttribute(\"full\",\"true\")\n    const att = $r2.getAttribute(\"full\")\n    if(att === \"true\"){\n      sheet.replaceSync( `div.chat-wrapper[opened=\"true\"] { height: 60%}`);\n      $r2.shadowRoot.adoptedStyleSheets = [ sheet ]; \n      $r2.setAttribute(\"full\",false)\n    }\n    else{\n      // const $r1 = document.querySelector(\"df-messenger\");\n      // const $r2 = $r1.shadowRoot.querySelector(\"df-messenger-chat\");\n      // let sheet = new CSSStyleSheet();\n      sheet.replaceSync( `div.chat-wrapper[opened=\"true\"] { height: 85%; width: 98%; }`);\n      $r2.shadowRoot.adoptedStyleSheets = [ sheet ]; \n      $r2.setAttribute(\"full\", true)\n    }\n  }\n\n\n  return (\n    <div className=\"App\" >\n        <df-messenger\n          intent=\"WELCOME\"\n          chat-title=\"fabbi_dev_chatbot\"\n          agent-id=\"82175675-591d-453a-bb3a-3ebfe4356767\"\n          language-code=\"ja\"\n          chat-icon=\"https://www.devwork.vn/upload/userAd/256/1537407654.Icon_4x_square.png\"\n        />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}